# nginx/conf.d/zettl.conf
upstream auth_backend {
    server auth-service:3001;
    keepalive 32;
}

upstream api_backend {
    server postgrest:3000;
    keepalive 32;
}

upstream web_backend {
    server zettl-web:5000;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;

# Cache configuration
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=500m inactive=7d use_temp_path=off;

# Main server configuration
server {
    listen 80;
    server_name zettlnotes.app www.zettlnotes.app localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Remove server header
    more_clear_headers Server;
    
    # Client body size (for note uploads)
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    # Root location - Web Application
    location / {
        limit_req zone=general_limit burst=50 nodelay;
        
        proxy_pass http://web_backend;
        
        # Cache static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://web_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 7d;
            proxy_cache_valid 404 10m;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status;
            expires 7d;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Authentication endpoints
    location /api/auth/ {
        # Different rate limits for different auth endpoints
        location = /api/auth/login {
            limit_req zone=login_limit burst=2 nodelay;
            proxy_pass http://auth_backend;
        }
        
        location = /api/auth/register {
            limit_req zone=login_limit burst=2 nodelay;
            proxy_pass http://auth_backend;
        }
        
        location /api/auth/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://auth_backend;
        }
    }
    
    # PostgREST API endpoints
    location /api/v1/ {
        limit_req zone=api_limit burst=30 nodelay;
        
        # Rewrite to remove /api/v1 prefix
        rewrite ^/api/v1/(.*) /$1 break;
        
        proxy_pass http://api_backend;
        
        # API response caching for GET requests
        proxy_cache api_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 1m;
        proxy_cache_valid 404 10m;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_bypass $http_authorization;
        proxy_no_cache $http_authorization;
        
        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status;
        
        # CORS headers for API
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key, Prefer, Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Range, Content-Length' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key, Prefer, Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # Health check endpoints
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }
    
    location /api/health {
        access_log off;
        
        location = /api/health/auth {
            proxy_pass http://auth_backend/health;
        }
        
        location = /api/health/api {
            proxy_pass http://api_backend/;
        }
        
        location = /api/health/web {
            proxy_pass http://web_backend/health;
        }
    }
    
    # WebSocket support for real-time features (future enhancement)
    location /ws {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 86400;
    }
    
    # pgAdmin (protected endpoint)
    location /pgadmin/ {
        # Restrict to local network or VPN
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 127.0.0.1;
        deny all;
        
        proxy_pass http://pgadmin:5051/;
        proxy_set_header X-Script-Name /pgadmin;
        proxy_set_header Host $host;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Redirect www to non-www
server {
    listen 80;
    server_name www.zettlnotes.app;
    return 301 $scheme://zettlnotes.app$request_uri;
}
